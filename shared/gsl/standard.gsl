// ===========================================================================
//  $RCSfile: standard.gsl,v $ $Revision: 1.10 $
//  $Date: 2003-09-24 10:47:26 $
//  $Author: squig $
//
//  File:         GSL-Library standard.gsl
//  Description:  Contains an GSL expression used to initialize the standard
//                activation environment. Is to be executed only once at
//                GSL Interpreter startup
//  First Author: keulsn
//  Status:       Initial
//
//
// ===========================================================================

[
  // logical negation
  set
   (+not,
    { (+a)
      if
       (a,
        false,
        true)
    });

  // logical and
  set
   (+and_then,
    { (+a, +b)
      [
        if
         (is_script (a),
          {() set ('a, a ())},
          null);
        if 
         (a,
          b,
          false);
       ]
    });

  set
   (+and,
    { (+a, +b)
      [
        if
         (is_script (a),
          {() set ('a, a ())},
          null);

	// Sicherstellen, dass b auf jeden Fall aktiviert wird
        if
         (is_script (b),
          {() set ('b, b ())},
          null);

        if 
         (a,
          b,
          false);
      ]
    });

  // logical or
  set
   (+or_else,
    { (+a, +b)
      [
        if
         (is_script (a),
          {() set ('a, a ())},
          null);

        if
         (a,
          true,
          b);
      ]
    });

  set
   (+or,
    { (+a, +b)
      [
        if
         (is_script (a),
          {() set ('a, a ())},
          null);
        if
         (is_script (b),
          {() set ('b, b ())},
          null);
        if
         (a,
          true,
          b);
      ]
    });

  // loops
  set
   (+while,
    { (+b, +c)
      [
	+start_cond;
        if
         (is_script (b),
          {() set ('start_cond, b ())},
          {() set ('start_cond, b   )});
        if
         (start_cond,
          {() loop ({() [c (); b ();]})},
          null);
       ]
    });

  set
   (+repeat,
    { (+c, +until)
      loop ({() [c (); not (until ());]})
    });


  // sets
  set
   (+union, add);

  set
   (+intersection,
    { (+A, +B)
      [
        +result;
        set
          (+a_is_a_node_set, is_node_set (A));
        if
         (a_is_a_node_set,
          {() set ('result, empty_node_set ())},
          {() set ('result, empty_edge_set ())});
        for_each
         (A,
          { (+e)
            [ 
              set (+e_is_in_B, is_in (B, e));
              if
               (e_is_in_B,
                {() add ('result, e)},
                null);
            ]
          });
        result;
      ]
    });

  set
   (+difference, sub);

  // node sets
  set
   (+select_nodes,
    { (+from, +node_predicate)
      [
        set
          (+node_set, empty_node_set ());
           for_each
            (from,
             { (+n)
	       [
                 set (+predicate_true, node_predicate (n));
                 if 
                  (predicate_true,
                   {() add ('node_set, n)},
                   null);
               ]
             });
        node_set;
      ]
    });

  set
   (+build_nodes,
    { (+edge_set, +node_predicate)
      [
        set
         (+node_set, empty_node_set ());
          for_each
           (edge_set,
            { (+e)
              [
                set
                 (+n, get_source (e));
                set (+predicate_true, node_predicate (n));
                if 
                 (predicate_true,
                  {() add ('node_set, n)},
                  null);

                set
                 ('n, get_target (e));
                set (+predicate_true, node_predicate (n));
                if 
                 (predicate_true,
                  {() add ('node_set, n)},
                  null);
              ]
            });
          node_set;
      ]
    });

  set
   (+for_each,
    { (+a_set, +action)
      [
        set (+count, size_of ('a_set));
        set (+is_empty_set, less (count, 1));
        if
          (is_empty_set,
           null,
           { ()
             [
               set (+copy, a_set);
               +item;
               loop
                ({ ()
                   [
                     set ('item, get_first ('copy));
                     action (item);
                     sub ('copy, item);
                     set ('count, sub (count, 1));
                     less (0, count);
                   ]
                 });
             ]
           });
      ]
    });
]
