-- GSL Scanner rules
-- Compile using aflex, use scanner.aflex as parser
--
-- $Revision: 1.1 $
-- $Date: 2003-05-27 13:47:36 $
-- $Author: schulzgt $
--
-- First Author: keulsn
--


-- definitions section

letter                    [a-zA-Z]
digit                     [0-9]
string_literal            \"((\\\")|(\\[^\"])|[^\\^\"])*\"
int_literal               ([+-])?{digit}+
identifier                {letter}({letter}|{digit}|"_")*

%% -- rules section


\/\/.*$ {null;}   -- Comments are done as in C++:  // Text

"(" {return '(';}
")" {return ')';}
"{" {return '{';}
"}" {return '}';}
"[" {return '[';}
"]" {return ']';}
"," {return ',';}
"." {return '.';}
";" {return ';';}
"'" {return VISIBLE_REF_T;}
"+" {return '+';}

"null" {return NULL_T;}
"true" {return TRUE_T;}
"false" {return FALSE_T;}
"subgraph" {return SUBGRAPH_T;}
"selection" {return SELECTION_T;}

{int_literal} {return INT_LITERAL_T;}
{string_literal} {return STRING_LITERAL_T;}
{identifier} {return IDENTIFIER_T;}

[\n\t\f\ ]* {null;}       -- ignore white space


%% -- user defined section

with Giant.Parser.Tokens;
use Giant.Parser.Tokens;

## -- position of yylex -- user defined section

   function YYLex return Token;
